name: Release Docker Images

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (leave empty to use version from __init__.py)'
        required: false
        type: string
      push_latest:
        description: 'Also tag as latest'
        required: true
        type: boolean
        default: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Determine version
      id: version
      run: |
        if [ -n "${{ inputs.version }}" ]; then
          VERSION="${{ inputs.version }}"
        else
          VERSION=$(grep '__version__ =' agent_memory_server/__init__.py | sed 's/__version__ = "\(.*\)"/\1/' || echo "latest")
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version to release: $VERSION"

    - name: Build tags list
      id: tags
      run: |
        TAGS="redislabs/agent-memory-server:${{ steps.version.outputs.version }}"
        TAGS="$TAGS,ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}"

        if [ "${{ inputs.push_latest }}" = "true" ]; then
          TAGS="$TAGS,redislabs/agent-memory-server:latest"
          TAGS="$TAGS,ghcr.io/${{ github.repository }}:latest"
        fi

        echo "tags=$TAGS" >> $GITHUB_OUTPUT
        echo "Tags to push: $TAGS"

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.tags.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create GitHub Release Draft
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: server/v${{ steps.version.outputs.version }}
        release_name: ${{ steps.version.outputs.version }} (Draft)
        body: |
          Docker images published:
          - `redislabs/agent-memory-server:${{ steps.version.outputs.version }}`
          - `ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}`
          ${{ inputs.push_latest && format('- `redislabs/agent-memory-server:latest`{0}- `ghcr.io/{1}:latest`', '\n          ', github.repository) || '' }}
        draft: true
        prerelease: true
